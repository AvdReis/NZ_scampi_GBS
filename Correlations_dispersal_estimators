####PACKAGES####
library(tidyverse)
library(geosphere)

#------------------------------------------------------------------------------------------#
#ID particles that travelled for the longest or time period
#this was also done previously using df time_area in R_particle_modelling_analyses
timestamp <- start_end_data
timestamp$row_count <- timestamp$row.x - timestamp$row.y #this give you the number of recorded times the particle was active
timestamp %>% filter(start_location == "location_A") %>% arrange(desc(row_count)) #particle that took the longest to be captured used as timestamp_col_number
timestamp %>% filter(start_location == "location_A") %>% arrange(desc(-row_count)) #particle that took the shortest time to be captured
mean(timestamp$row_count) #calculate the mean 
timestamp %>% filter(timestamp > x & timestamp < y) #ID particles that took the mean amount of time

#---MINIMUM DISTANCE A CAPTURED PARTICLE TRAVELLED---#

minimum_dist <- start_end_data %>% filter(start_location == "location_A") %>% filter(col == timestamp_col_number)

#getting data from the one column selected
caught_lat <- as.data.frame(lat[,minimum_dist$col])
path_caught_lat <- gather(caught_lat, key = V, "latitude_path")
path_caught_lat <- filter(path_caught_lat, latitude_path < 0)

caught_lon <- as.data.frame(lon[,minimum_dist$col])
path_caught_lon <- gather(caught_lon, key = V, "longitude_path")
path_caught_lon <- filter(path_caught_lon, longitude_path < 200)

#joining data to get the complete path
path_min <- cbind(path_caught_lat, path_caught_lon)
min_tracks <- path_min[,c(2,4,1)]

#calculate distance between two points
gdist <- min_tracks[,1:2]
gdist_1 <- gdist[1:n-1,]#n depends on the number of rows
gdist_1 <-  rename(gdist_1, lat1 = latitude_path, lon1 = longitude_path)

gdist_2 <- gdist[2:n,] #n depends on the number of rows
gdist_2 <-  rename(gdist_2, lat2 = latitude_path, lon2 = longitude_path)

tot_dist <- cbind(gdist_1, gdist_2)

tot_dist$dist <- distHaversine(tot_dist[,c(2,1)], tot_dist[,c(4,3)])
sum(tot_dist$dist)

#---MAXIMUM DISTANCE A CAPTURED PARTICLE TRAVELLED---#

max <- start_end_data %>% filter(start_location == "location_A") %>% filter(col == timestamp_col_number)

caught_lat <- as.data.frame(lat[,max$col])
path_caught_lat <- gather(caught_lat, key = V, "latitude_path")
path_caught_lat <- filter(path_caught_lat, latitude_path < 0)

caught_lon <- as.data.frame(lon[,max$col])
path_caught_lon <- gather(caught_lon, key = V, "longitude_path")
path_caught_lon <- filter(path_caught_lon, longitude_path < 200)

path_max <- cbind(path_caught_lat, path_caught_lon)

max_tracks <- path_max[,c(2,4,1)]

#calculate distance between two points as per minimum

#---MEAN DISTANCE A CAPTURED PARTICLE TRAVELLED---#

mean <- start_end_data %>% filter(start_location == "location_A") %>% filter(col == timestamp_col_number)

caught_lat <- as.data.frame(lat[,mean$col])
path_caught_lat <- gather(caught_lat, key = V, "latitude_path")
path_caught_lat <- filter(path_caught_lat, latitude_path < 0)

caught_lon <- as.data.frame(lon[,mean$col])
path_caught_lon <- gather(caught_lon, key = V, "longitude_path")
path_caught_lon <- filter(path_caught_lon, longitude_path < 200)

path_mean <- cbind(path_caught_lat, path_caught_lon)

mean_tracks <- path_mean[,c(2,4,1)]

#calculate distance between two points as per minimum

#---PLOT PATHS ON MAP---#

start_end_data <- left_join(end_data, start_data,  by = "col")

table(start_end_data$start_location, start_end_data$status.y)

#select two random particles from a specific location
random_pick <- start_end_data %>% group_by(start_location) %>% filter(start_location == "AI") %>% sample_n(2)
#Can be selected columns and not necessarily random, e.g., minimum distance
minimum_pick <- timestamp %>% group_by(start_location) %>% arrange(desc(-row_count)) %>% top_n(2)
timestamp %>% group_by(start_location) %>% filter(row_count == min(row_count)) %>% filter(row_number()==1)


#plot a few random that got caught
caught_lat <- as.data.frame(lat[,random_pick$col])
path_caught_lat <- gather(caught_lat, key = V, "latitude_path")
path_caught_lat <- filter(path_caught_lat, latitude_path < 0)

caught_lon <- as.data.frame(lon[,random_pick$col])
path_caught_lon <- gather(caught_lon, key = V, "longitude_path")
path_caught_lon <- filter(path_caught_lon, longitude_path < 200)

path_data <- cbind(path_caught_lat, path_caught_lon)

all_tracks <- path_data[,c(2,4,1)]

ggplot(all_tracks, aes(x = longitude_path, y = latitude_path)) +
    geom_path(aes(group=V), color = "light blue") +
  geom_path(min_tracks, mapping = aes(x = longitude_path, y = latitude_path), color = "green") +
  geom_path(max_tracks, mapping = aes(x = longitude_path, y = latitude_path), color = "red") +
  geom_path(mean_tracks, mapping = aes(x = longitude_path, y = latitude_path), color = "orange") +
  geom_path(trawl_box, mapping = aes(WC_lon, WC_lat))+
  geom_polygon(trawl_box, mapping = aes(UNI_lon, UNI_lat), fill = "black")

trawl_box <- data.frame("LNI_lon" = c(177.9639, 177.9639, 177.2627, 177.2627, 177.9639), "LNI_lat" = c(-39.50853, -40.0473, -40.0473, -39.50853, -39.50853), "UNI_lon" = c(176.7432, 176.7432, 176.0677, 176.0677, 176.7432), "UNI_lat" = c(-36.80961, -37.34838, -37.34838, -36.80961, -36.80961), "CR_lon" = c(177.0999, 177.0999, 176.3626, 176.3626, 177.0999), "CR_lat" = c(-42.76741, -43.30618, -43.30618, -42.76741, -42.76741), "AI_lon" = c(167.2985, 167.2985, 166.4465, 166.4465, 167.2985), "AI_lat" = c(-50.48226, -51.02104, -51.02104, -50.48226, -50.48226), "WC_lon" = c(169.806, 169.806, 169.116, 169.116, 169.806), "WC_lat" = c(-38.38665, -38.92542, -38.92542, -38.38665, -38.38665))

library(scales)

NZMap <- getNOAA.bathy(lon1 = 155, lon2 = 180,
                       lat1 = -30, lat2 = -55, resolution = 4)
plot(NZMap, lwd = c(0.3, 1), lty = c(1, 1),
     deep = c(-1000, 0), shallow = c(-50, 0), step = c(500, 0),
     col = c("grey", "black"), drawlabels = c(FALSE, FALSE))

#WC = alpha(rgb(117/255, 112/255, 179/255), 0.5)
#AI = alpha(rgb(102/255, 166/255, 30/255), 0.5)
#LNI = alpha(rgb(27/255, 157/255, 119/255), 0.5)
#CR = alpha(rgb(231/255, 41/255, 137/255), 0.5)
#UNI = alpha(rgb(218/255, 95/255, 2/255), 0.5)

##lines(x = all_tracks$longitude_path, y = all_tracks$latitude_path, col = WC , type = "l")
lines(x = all_tracks$longitude_path, y = all_tracks$latitude_path, col = AI , type = "l")
lines(x = all_tracks$longitude_path, y = all_tracks$latitude_path, col = LNI , type = "l")
lines(x = all_tracks$longitude_path, y = all_tracks$latitude_path, col = CR , type = "l")
lines(x = all_tracks$longitude_path, y = all_tracks$latitude_path, col = UNI , type = "l")
#lines(x = trawl_box$UNI_lon, y = trawl_box$UNI_lat, col = "black")
#lines(x = trawl_box$LNI_lon, y = trawl_box$LNI_lat, col = "black")
#lines(x = trawl_box$CR_lon, y = trawl_box$CR_lat, col = "black")
lines(x = trawl_box$WC_lon, y = trawl_box$WC_lat, col = "black")

lines(x = trawl_box$UNI_lon, y = trawl_box$UNI_lat, col = "black")
lines(x = trawl_box$AI_lon, y = trawl_box$AI_lat, col = "black")






