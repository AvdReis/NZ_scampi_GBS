#This follows the same coding pattern as the density plot
#Extract when time = 2 and then calculate the movement
#This uses snips of code from the particle modelling analyses file too


set.seed(15896)
m1 <- as.data.frame(m1)

#selecting the corresponding particles and their latitudes
caught_lat <- as.data.frame(lat)
path_caught_lat <- gather(caught_lat, key = V, "latitude_path")
path_caught_lat <- filter(path_caught_lat, latitude_path < 0)

#selecting the corresponding particles and their longitudes
caught_lon <- as.data.frame(lon)
path_caught_lon <- gather(caught_lon, key = V, "longitude_path")
path_caught_lon <- filter(path_caught_lon, longitude_path < 200)

#putting the data together
path_data <- cbind(path_caught_lat, path_caught_lon)

#selecting necessarily colummns and ordering them
all_tracks <- path_data[,c(2,4,1)]

#converting negative values for plotting
all_tracks$longitude_path <- if_else(all_tracks$longitude_path < 0, 360 + (all_tracks$longitude_path), all_tracks$longitude_path)

#Getting start location information
metadata <- start_data[,c("col", "start_location", "row")]
metadata$V <- paste("V", metadata$col, sep = "")

all_tracks <- left_join(all_tracks, metadata)

#calculate time - each record is 7 days/1 weeks
all_tracks <- all_tracks %>% group_by(V) %>% mutate(time = rep(1:length(V)))

#based on the length split into seasons - row is when the particle was released duering the course of the year
length(unique(metadata$row))
all_tracks$Season <- if_else(all_tracks$row <=9, "Summer", if_else(all_tracks$row <= 22, "Autumn", if_else(all_tracks$row <= 37, "Winter", if_else(all_tracks$row <= 50, "Spring", "Summer"))))

#Filter for the number of weeks interested in calculating the distance for
all_tracks <- filter(all_tracks, time <= 2)

all_tracks <- filter(all_tracks, start_location == "AI" | start_location == "CR" | start_location == "LNI" | start_location == "UNI" | start_location == "WC")

#needed to calculate distance
library(geosphere)

#Have to start and stop locations, required by dist function to calculate distance moved
#Distance is in a straight line - i.e., point to point
gdist <- all_tracks
gdist_add_t0 <- unique(gdist[,c("V", "col", "start_location", "row", "Season")])

#Adding time = 0 location
#Centre of trawl area
t0 <- data.frame("latitude_path" = c(-39.77792, -37.07899, -43.03679, -50.75165, -38.65604),
                 "longitude_path" = c(177.6133, 176.4055, 176.7312, 166.8725, 169.4610),
                 "start_location" = c("LNI", "UNI", "CR", "AI", "WC"),
                 #"lat_s" = c(-39.77792, -37.07899, -43.03679, -50.75165, -38.65604),
                 #"lon_s" = c(177.6133, 176.4055, 176.7312, 166.8725, 169.4610),
                 "time" = 0)
gdist_add_t0 <- left_join(gdist_add_t0, t0)
gdist <- rbind(gdist, gdist_add_t0)

gdist <- gdist %>% group_by(col) %>% arrange(col, time)

#Dataset to calculate point 1 locations
gdist_1 <- gdist
gdist_1 <-  rename(gdist_1, lat1 = latitude_path, lon1 = longitude_path)

#Dataset to calculate point 2 locations
gdist_2 <- gdist[-1,]
gdist_2 <- gdist_2 %>% group_by(V) %>% mutate(id = row_number())
gdist_2$V2 <- paste(gdist_2$V, gdist_2$id, sep = ".")
dup_last_row <- gdist_2[nrow(gdist_2),]
gdist_2 <- rbind(gdist_2, dup_last_row)
gdist_2 <-  rename(gdist_2, lat2 = latitude_path, lon2 = longitude_path)
gdist_2 <- gdist_2[,c("lat2", "lon2", "V2")]

tot_dist <- cbind(gdist_1, gdist_2)

#Remove last row from every particle
tot_dist <- tot_dist %>%
  group_by(V) %>%
  slice(-n())

#Distance between points calculated
tot_dist$dist <- distHaversine(tot_dist[,c("lon1", "lat1")], tot_dist[,c("lon2", "lat2")])
sum_tot <- aggregate(dist~V+start_location+col+Season, tot_dist, sum)
aggregate(dist~start_location+Season, sum_tot, mean)
