####PACKAGES####
library(dplyr)
library(tidyr)
library(ncdf4)
library(marmap)
library(ggplot2)

#load raw data
matlab <- "C:/path/to/data/particle_modelling.nc"

#open a netCDF file
ncin <- nc_open(matlab)
print(ncin)

#get longitude
lon <- ncvar_get(ncin,"lon")
dim(lon)

#get latitude
lat <- ncvar_get(ncin,"lat")
dim(lat)

#depending how the different status' were defined - 0: active particle, 1: particle left the domain, 2: particle is onland, 3: particle has been caught
status <- ncvar_get(ncin,"status")
dim(status)

#status
m1 <- as.matrix(status)

no_col <- as.data.frame(rep(1:n)) #n = this will very with the size of your dataframe
no_col$col <- no_col$`rep(1:n)` 

#Extract particles that had status 1
no_one <- as.data.frame(which(m1==1, arr.ind=TRUE))

#Extract particles that had status 2
no_two <- as.data.frame(which(m1==2, arr.ind=TRUE))

#Extract particles that had status 3
no_three <- as.data.frame(which(m1==3, arr.ind=TRUE))

#Extract particles that are still active or did not start - ensuring all particles are accounted for!
no_zero <- anti_join(no_col, no_one)
no_zero <- anti_join(no_zero, no_two)
no_zero <- anti_join(no_zero, no_three)

#identifying row and column where first '0' is - this is when the particle would have been released
m1 <- as.matrix(status)

rnc_start <- which(m1==0, arr.ind=TRUE)
rnc_start <- as.data.frame(rnc_start)
rnc_start <- rnc_start %>% group_by(col) %>% filter(row_number()==1)
rnc_start <- as.matrix(rnc_start) #coords of start for each particle

#creating dataframe that has row and columns to make a reference when join start and finish
start_data <- as.data.frame(rnc_start)

#extract lat and long of starting points
start_data$lat_s <- lat[rnc_start]
start_data$lon_s <- lon[rnc_start]

start_data$status <- rep(0)

#see what is happening to the particles unaccounted for
missing <- data.frame(rep(1:n)) #n = this will very with the size of your dataframe
missing$col <- missing$rep.1.n.
missing <- anti_join(missing, start_data) #ID particles that never became active
#lat[, 36756] #some particles just never started 

#=======================================================================================================================#
#Not all particles were released within their defined boxes and this section is specifically for this articles which can be adapted for your own work
#As best possible all particles were assigned to a release location (fishery management unit) dependant on geographic coordinates

#CR#
start_data$start_location <- if_else(start_data$lat_s > -45 & start_data$lat_s < -35 & start_data$lon_s < 173, "WC", if_else(start_data$lat_s > -55 & start_data$lat_s < -45, "AI", if_else(start_data$lat_s > -38 & start_data$lat_s & start_data$lon_s > 173, "UNI", if_else(start_data$lat_s < -42.6, "CR", "LNI"))))

#AI, WC, UNI, LNI#
start_data$start_location <- if_else(start_data$lat_s > -45 & start_data$lat_s < -35 & start_data$lon_s < 173, "WC", if_else(start_data$lat_s > -55 & start_data$lat_s < -45, "AI", if_else(start_data$lat_s > -38 & start_data$lat_s & start_data$lon_s > 173, "UNI", if_else(start_data$lat_s < -42.6, "CR", "LNI"))))
#separate CR and LNI#
not_CR_LNI <- filter(start_data, start_location != "CR" & start_location != "LNI")
CR_LNI <- filter(start_data, start_location != "AI" & start_location != "WC", start_location != "UNI")

CR_LNI$start_location <- if_else(CR_LNI$lat_s < -42 & CR_LNI$lon_s < 177.5, "CR", CR_LNI$start_location)

CR_LNI$start_location <- if_else(CR_LNI$lat_s > -42.49802 & CR_LNI$lon_s > 177.0999, "LNI", CR_LNI$start_location)

start_data <- rbind(not_CR_LNI, CR_LNI)

#LNI only#
start_data$start_location <- if_else(start_data$start_location == "LNI", "CR", start_data$start_location)

table(start_data$status, start_data$start_location)
#=======================================================================================================================#

#identifying row and column where 'caught' is, as these are the particles that are most interesting
rnc_end <- which(m1==3, arr.ind=TRUE) #may not be assigned to '3' as caught

end_data <- as.data.frame(rnc_end)

end_data$lat_f <- lat[rnc_end]
end_data$lon_f <- lon[rnc_end]

#end_data$lon_f <- 180 + (180 - (end_data$lon_f * -1)) #specifically for my data

end_data$status <- rep(3) #may not be assigned to '3'

#join data together
#this way can check stats
start_end_data <- left_join(end_data, start_data,  by = "col")

table(start_end_data$start_location, start_end_data$status.y)

#MEAN TIME BEFORE CAUGHT#
#count how long on average particles took from getting released to getting caught
#here you need to know how often the particles coords were captured
time <- t(status)
time <- as.data.frame(time)
time$col <- rep(1:n)

end_data_time <- end_data[,1:2]

time <- left_join(end_data_time, time)
time$count_zero <- apply(time, 1, function(x) length(which(x==0))) #count how many zeros there are in a column
time$count_zero <- time$count_zero+1 #plus 1 for not counting '3'

head(time$count_zero)

area <- start_end_data[,c(2,10)] #may need to be adjusted according to data

time_area <- time[,c(2,524)]
time_area <- left_join(area, time_area)
aggregate(count_zero ~ start_location, time_area, FUN = mean/max/min/median) #if there is min mean max etc in the global env the fun will not work rm(min/max) from global env
time_area %>% filter(count_zero == n & start_location == "location_A") #obtain particle ID

error_std <- time_area %>% filter(start_location == "location_A")

#--------------------#
std <- function(x) sd(x)/sqrt(length(x))
se <- function(x) sqrt(var(x)/length(x))
#--------------------#

std(error_std$count_zero)
se(error_std$count_zero)
