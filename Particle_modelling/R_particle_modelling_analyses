####PACKAGES####
library(dplyr)
library(tidyr)
library(ncdf4)
library(marmap)
library(ggplot2)
library(geosphere)

#load raw data
matlab <- "C:/path/to/data/particle_modelling.nc"

#open a netCDF file
ncin <- nc_open(matlab)
print(ncin)

#get longitude
lon <- ncvar_get(ncin,"lon")
dim(lon)

#get latitude
lat <- ncvar_get(ncin,"lat")
dim(lat)

#depending how the different status' were defined - 0: active particle, 1: particle left the domain, 2: particle is onland, 3: particle has been caught
status <- ncvar_get(ncin,"status")
dim(status)

#status
m1 <- as.matrix(status)

no_col <- as.data.frame(rep(1:n)) #n = this will very with the size of your dataframe
no_col$col <- no_col$`rep(1:n)` 

#Extract particles that had status 1
no_one <- as.data.frame(which(m1==1, arr.ind=TRUE))

#Extract particles that had status 2
no_two <- as.data.frame(which(m1==2, arr.ind=TRUE))

#Extract particles that had status 3
no_three <- as.data.frame(which(m1==3, arr.ind=TRUE))

#Extract particles that are still active or did not start - ensuring all particles are accounted for!
no_zero <- anti_join(no_col, no_one)
no_zero <- anti_join(no_zero, no_two)
no_zero <- anti_join(no_zero, no_three)

#identifying row and column where first '0' is - this is when the particle would have been released
m1 <- as.matrix(status)

rnc_start <- which(m1==0, arr.ind=TRUE)
rnc_start <- as.data.frame(rnc_start)
rnc_start <- rnc_start %>% group_by(col) %>% filter(row_number()==1)
rnc_start <- as.matrix(rnc_start) #coords of start for each particle

#creating dataframe that has row and columns to make a reference when join start and finish
start_data <- as.data.frame(rnc_start)

#extract lat and long of starting points
start_data$lat_s <- lat[rnc_start]
start_data$lon_s <- lon[rnc_start]

start_data$status <- rep(0)

#see what is happening to the particles unaccounted for
missing <- data.frame(rep(1:n)) #n = this will very with the size of your dataframe
missing$col <- missing$rep.1.n.
missing <- anti_join(missing, start_data) #ID particles that never became active
#lat[, 36756] #some particles just never started 

#=======================================================================================================================#
#Not all particles were released within their defined boxes and this section is specifically for this articles which can be adapted for your own work
#As best possible all particles were assigned to a release location (fishery management unit) dependant on geographic coordinates

#CR#
start_data$start_location <- if_else(start_data$lat_s > -45 & start_data$lat_s < -35 & start_data$lon_s < 173, "WC", if_else(start_data$lat_s > -55 & start_data$lat_s < -45, "AI", if_else(start_data$lat_s > -38 & start_data$lat_s & start_data$lon_s > 173, "UNI", if_else(start_data$lat_s < -42.6, "CR", "LNI"))))

#AI, WC, UNI, LNI#
start_data$start_location <- if_else(start_data$lat_s > -45 & start_data$lat_s < -35 & start_data$lon_s < 173, "WC", if_else(start_data$lat_s > -55 & start_data$lat_s < -45, "AI", if_else(start_data$lat_s > -38 & start_data$lat_s & start_data$lon_s > 173, "UNI", if_else(start_data$lat_s < -42.6, "CR", "LNI"))))
#separate CR and LNI#
not_CR_LNI <- filter(start_data, start_location != "CR" & start_location != "LNI")
CR_LNI <- filter(start_data, start_location != "AI" & start_location != "WC", start_location != "UNI")

CR_LNI$start_location <- if_else(CR_LNI$lat_s < -42 & CR_LNI$lon_s < 177.5, "CR", CR_LNI$start_location)

CR_LNI$start_location <- if_else(CR_LNI$lat_s > -42.49802 & CR_LNI$lon_s > 177.0999, "LNI", CR_LNI$start_location)

start_data <- rbind(not_CR_LNI, CR_LNI)

#LNI only#
start_data$start_location <- if_else(start_data$start_location == "LNI", "CR", start_data$start_location)

table(start_data$status, start_data$start_location)
#=======================================================================================================================#

#identifying row and column where 'caught' is, as these are the particles that are most interesting
rnc_end <- which(m1==3, arr.ind=TRUE) #may not be assigned to '3' as caught

end_data <- as.data.frame(rnc_end)

end_data$lat_f <- lat[rnc_end]
end_data$lon_f <- lon[rnc_end]

#end_data$lon_f <- 180 + (180 - (end_data$lon_f * -1)) #specifically for my data

end_data$status <- rep(3) #may not be assigned to '3'

#join data together
#this way can check stats
start_end_data <- left_join(end_data, start_data,  by = "col")

table(start_end_data$start_location, start_end_data$status.y)

#=======================================================================================================================#

#calculate the distance and time taken per particle that got caught

#not really that random... if wanting to subset data
#random_pick <- start_end_data %>% group_by(start_location) #%>% filter(start_location == "AI") #%>% sample_n(2)#filter(col == 145664)#can sample a random number or filter for a specific particle

caught_lat <- as.data.frame(lat[,start_end_data$col]) 
path_caught_lat <- gather(caught_lat, key = V, "latitude_path")
path_caught_lat <- filter(path_caught_lat, latitude_path < 0) #this is to remove erroneous data and will differ depending on location

caught_lon <- as.data.frame(lon[,start_end_data$col])
path_caught_lon <- gather(caught_lon, key = V, "longitude_path")
path_caught_lon <- filter(path_caught_lon, longitude_path < 200) #this is to remove erroneous data and will differ depending on location

path_data <- cbind(path_caught_lat, path_caught_lon)

all_tracks <- path_data[,c(2,4,1)]

#add start location
location <- start_end_data[,c("V", "start_location", "col")]
all_tracks <- left_join(location, all_tracks)

#mean distance
#this takes a bit of data manipulation to get it into the correct format to calculate distance
#essentially making a dataframe where row 1 gives coords from A to B and then row 2 give B to C

gdist <- all_tracks
gdist_1 <- gdist
gdist_1 <-  rename(gdist_1, lat1 = latitude_path, lon1 = longitude_path)

gdist_2 <- gdist[-1,] #omit first row according to df length this ensures that when binding dist 1 and 2 that A goes to B and not back to A
gdist_2 <- gdist_2 %>% group_by(V) %>% mutate(id = row_number())
gdist_2$V2 <- paste(gdist_2$V, gdist_2$id, sep = ".") #checking that last rows of very group by are deleted
dup_last_row <- gdist_2[nrow(gdist_2),] #to make sure df are same length
gdist_2 <- rbind(gdist_2, dup_last_row)
gdist_2 <-  rename(gdist_2, lat2 = latitude_path, lon2 = longitude_path)
gdist_2 <- gdist_2[,c("lat2", "lon2", "V2")]

tot_dist <- cbind(gdist_1, gdist_2)

#remove last row as intended 
tot_dist <- tot_dist %>%
  group_by(V) %>%
  slice(-n())

#tot_dist[grepl("V1$|V2$", tot_dist$V), ] %>% View

#calculate distance between time periods
tot_dist$dist <- distHaversine(tot_dist[,c("lon1", "lat1")], tot_dist[,c("lon2", "lat2")])

#calculate weeks
tot_dist$time <- rep(1)
sum_tot <- aggregate(cbind(time, dist)~V+start_location+col, tot_dist, sum)
sum_tot$time <- sum_tot$time+1 #need to add a week as A to B is week 2 and not 1
#sum_tot$time <- as.character(sum_tot$time)
ggplot(sum_tot)+
  geom_point(aes(x = dist, y = time, colour = start_location))+
  facet_wrap(~start_location)

#minimum
sum_tot %>% group_by(start_location) %>% arrange(desc(-dist)) %>% filter(row_number()==1) #gives particle ID
#maximum
sum_tot %>% group_by(start_location) %>% arrange(desc(dist)) %>% filter(row_number()==1) #gives particle ID

#distance summary
sum_distance <- sum_tot %>% group_by(start_location) %>% summarise(mean = mean(dist), median = median(dist), max = max(dist), min = min(dist))

#time summary
sum_time <- sum_tot %>% group_by(start_location) %>% summarise(mean = mean(time), median = median(time), max = max(time), min = min(time))
